# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/focal64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 8080, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.56.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network", bridge: "enx089204696b1f"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:

  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    vb.gui = false
    # Customize the amount of memory on the VM:
    vb.memory = "12024"
    vb.cpus   = "4"
  end

  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    apt-get update
    apt-get install -y jq apt-transport-https ca-certificates curl gnupg-agent software-properties-common
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    apt-get update
    apt-get install -y docker-ce docker-ce-cli containerd.io bash-completion
    usermod -aG docker vagrant
    iptables -P FORWARD ACCEPT
    apt-get install -y iptables-persistent
  SHELL

  config.vm.provision "shell", inline: <<-SHELL2
    snap install microk8s --classic --channel=1.20/stable
    printf '{\n    "insecure-registries" : ["localhost:32000"]\n}' | tee /etc/docker/daemon.json
    systemctl restart docker
    usermod -a -G microk8s vagrant
  SHELL2

  config.vm.provision "shell", privileged: false, inline: <<-SHELL3
    sudo microk8s status --wait-ready
    microk8s status || true
    printf "alias kubectl='microk8s kubectl'\n" | tee -a ~/.bash_aliases
    printf "source <(kubectl completion bash)\n" | tee -a ~/.bashrc
  SHELL3

  config.vm.provision "shell", privileged: false, inline: <<-SHELL4
    microk8s enable registry dns ingress dashboard
    token=$(microk8s kubectl -n kube-system get secret | grep default-token | cut -d " " -f1)
    microk8s kubectl -n kube-system describe secret $token
    microk8s kubectl get services --all-namespaces
  SHELL4

  config.vm.provision "shell", privileged: false, inline: <<-SHELL5
    curl -fsSL -o /tmp/get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
    sudo /bin/bash /tmp/get_helm.sh && rm -rf /tmp/get_helm.sh
    microk8s config > ~/.kube/config
    chmod 600 ~/.kube/config
    printf "source <(helm completion bash)" | tee -a ~/.bashrc
  SHELL5

  # Port forwarding for accessing internal services:
  # ssh -L 8443:10.152.183.142:443 -i .vagrant/machines/default/virtualbox/private_key -Nv vagrant@192.168.56.10
  # Add this to local /etc/hosts:
  # 192.168.56.10	bootcamp.codeveros.com
end
